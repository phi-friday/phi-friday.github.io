{"pageProps":{"tag":"vscode","page":1,"max_page":1,"tag_counter":[["@all",25],["python",21],["fastapi",14],["sqlmodel",8],["fastapi-users",4],["crud",4],["returns",3],["함수형 프로그래밍",3],["windows",3],["wsl",3],["tdd",2],["anyio",2],["async",2],["vim",1],["js",1],["ts",1],["nextjs",1],["velog",1],["github",1],["restful",1],["pytest",1],["alembic",1],["postgres",1],["black",1],["isort",1],["vscode",1],["asyncio",1],["trio",1]],"posts":[{"name":"파이썬 코드를 깔끔하게, 그리고 일관성 있게 작성하는법","content":"스크립트를 작성하다보면 일관성있게 작성하기가 쉽지 않다.\n```python\ndata = [\n    (x, y)\n    for x, y in zip(range(5), range(20, 24))\n    if (x % 3 and y % 2) or (x % 5 and y % 7)\n]\n```\n이렇게 작성하든\n```python\ndata = [(x,y) for x,y in zip(range(5),range(20,24)) if (x%3 and y%2) or (x%5 and y%7)]\n```\n저렇게 작성하든 결국 결과는 같기 때문이다.\n\n이는 특히 협업시 두드러지게 나타나고, 파이썬의 장점인 **실행할 수 있는 의사코드**라는 점이 많이 퇴색된다.\n\n이러한 경우를 해결하기 위해, 그렇다면 **정해진 하나의 규칙으로, 전부 밀어버리면 되지 않냐**는 생각으로 만들어진 패키지가 있다. 바로 `black`이다.\n\n## 코드를 일관성있게 만드는 black\n***\n설치도 사용도 간단하다. `pip install black`으로 설치가 가능하고, `python -m black {source_file_or_directory}`으로 실행이 가능하다.\n\n**그런데 이것도 사실 꽤 귀찮다.** 스크립트를 수정하고 `black`을 계속 돌려줘야 하는데, 이걸 어떻게 다 기억하고 있을까.\n\n그래서 많이 쓰이는 `vscode`에서는, 파이썬 스크립트를 저장할 때 자동으로 `black`이 적용되도록 하는 옵션이 따로 있다. 다음 값을 `settings.json`에 추가하면 된다.\n```json\n{\n    \"python.formatting.provider\": \"black\",\n    \"editor.formatOnSave\": true\n}\n```\n\n이제 `vscode`에서 다음과 같은 코드를 작성하고\n```python\ndef test1(a,  b):\n    c=a+b\n    return c\n\ndef test2(\n    a,\n    b\n):\n    c = (\n        a*b\n    )\n    return c\n```\n저장을 하면 다음과 같이 변한다.\n```python\ndef test1(a, b):\n    c = a + b\n    return c\n\n\ndef test2(a, b):\n    c = a * b\n    return c\n\n```\n`black`의 변환 규칙은 [여기](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html)에서 확인 할 수 있다.\n\n### 하지만 완벽하지는 않다.\n\n하지만 `black`도 2% 부족한 부분이 있다. 각종 모듈을 import할 때, 해당 구문에 대한 정리가 단순히 88자 글자 제한을 넘기지 않는 정도에서 그치는 것이다.\n\n만약 다음과 같은 import구문이 있다면\n```python\nfrom datetime import datetime\nfrom anyio.abc import ObjectReceiveStream, ObjectSendStream\nfrom random import uniform\nfrom anyio import create_memory_object_stream, create_task_group, Semaphore, CapacityLimiter\n```\n`black`은 이렇게 까지만 수정된다.\n```python\nfrom datetime import datetime\nfrom anyio.abc import ObjectReceiveStream, ObjectSendStream\nfrom random import uniform\nfrom anyio import (\n    create_memory_object_stream,\n    create_task_group,\n    Semaphore,\n    CapacityLimiter,\n)\n```\n내가 import하는 모듈이 기본 라이브러리인지, 내가 따로 설치한 라이브러리인지, 로컬 패키지 인지 정리할 수 있다면 참 좋을텐데... 다행히 **그걸 위한 패키지가 있다.** 바로 `isort`다.\n\n## import 구문도 빠짐없이 정리\n\n`isort`의 readme 예시에 따르면, 다음과 같은 코드를\n```python\nfrom my_lib import Object\n\nimport os\n\nfrom my_lib import Object3\n\nfrom my_lib import Object2\n\nimport sys\n\nfrom third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14\n\nimport sys\n\nfrom __future__ import absolute_import\n\nfrom third_party import lib3\n```\n다음과 같이 깔끔하게 정리해준다.\n```python\nfrom __future__ import absolute_import\n\nimport os\nimport sys\n\nfrom third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,\n                         lib9, lib10, lib11, lib12, lib13, lib14, lib15)\n\nfrom my_lib import Object, Object2, Object3\n```\n\n정말 깔끔하게 변했다. 하지만 `from third_party import (...)`에서 확인할 수 있듯이, `black`의 규칙과 맞지 않는 부분이 있다. 다행히 최근 `isort`는 **`black`사용자를 위한 설정값을 따로 만들어놨다.**\n\n나는 `vscode`에서 저장할 때 자동으로 적용되길 바라기 때문에, `settings.json`에 다음과 같은 값을 추가했다.\n```json\n{\n    \"python.sortImports.args\": [\n        \"--profile\",\n        \"black\"\n    ],\n    \"[python]\": {\n        \"editor.codeActionsOnSave\": {\n            \"source.organizeImports\": true\n        }\n    }\n}\n```\n\n이 설정값을 저장하고 나면, 이전 코드는 다음과 같이 변한다.\n```python\nfrom datetime import datetime\nfrom random import uniform\n\nfrom anyio import (\n    CapacityLimiter,\n    Semaphore,\n    create_memory_object_stream,\n    create_task_group,\n)\nfrom anyio.abc import ObjectReceiveStream, ObjectSendStream\n```\n\n## 결론\n***\n`vscode`에서 파이썬 코드를 깔끔하게 작성하고 싶다면, `black`과 `isort`를 이용하기 위해, `settings.json`에 다음 값을 추가하면 된다.\n```json\n{\n    \"python.formatting.provider\": \"black\",\n    \"editor.formatOnSave\": true,\n    \"python.sortImports.args\": [\n        \"--profile\",\n        \"black\"\n    ],\n    \"[python]\": {\n        \"editor.codeActionsOnSave\": {\n            \"source.organizeImports\": true\n        }\n    }\n}\n```\n","mtime":"2022-08-13T00:12:20.000+09:00","href":"velog/파이썬 코드를 깔끔하게, 그리고 일관성 있게 작성하는법","data":{"title":"파이썬 코드를 깔끔하게, 그리고 일관성 있게 작성하는법","date":"2021-11-29T23:56:34.516+09:00","tags":["black","isort","python","vscode","@all"],"page":null,"summary":"black과 isort를 vscode에서 사용하자"}}]},"__N_SSG":true}