{"pageProps":{"post":{"name":"vim 영문 키보드 자동 전환","content":"\n# 아래 글은 퍼온 글입니다.\n출처는 다음과 같습니다.\n\n[[Vim] Normal모드에서 영문 키보드로 자동 전환하기 (Windows)](https://rottk.tistory.com/entry/Vim-Normal%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%EC%98%81%EB%AC%B8-%ED%82%A4%EB%B3%B4%EB%93%9C%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0-Windows)\n\n---\n\n# Windows에서 `Vim`을 사용하는 경우 (`VSCode`의 `Vim Extension`, `WSL`에서의 `Vim`)\n`Vim` 사용 시 흔히 겪는 문제가 한글로 주석 작성 후, Normal 모드로 전환하여 명령어를 입력하면 명령어가 적용되지 않는 문제가 있습니다.\n\n예를 들어, 파일 저장을 위해 `ESC` + `:w` 를 입력하였으나, 실제로는 `ESC`, `:ㅈ`가 입력되어 저장이 되지 않는 경우입니다.\n\n`Vim`에서 한글을 입력하는 경우는 코드에 주석을 넣는 경우 이외에는 없으므로, Normal 모드로 전환 시(즉, `ESC`를 누르면) 영문으로 자동전환이 되도록 설정하면 이러한 문제가 해결될 것입니다.\n\n※ 간단히 IME에서 해당 기능을 제공해준다면 별도의 프로그램을 설치하지 않아도 되겠지만 아쉽게도 `Microsoft IME`는 설정 기능이 존재하지 않아 외부 프로그램(키 매크로)을 설치하여 도움을 받아야 합니다.\n* 윈도에 [Auto HotKey](https://www.autohotkey.com/)를 설치합니다.\n* 메모장에 `Script.ahk`를 만들어 아래의 Script를 작성합니다.\n* 작성한 스크립트를 더블 클릭하여 실행합니다. 이후, `ESC`를 누르면 자동으로 영문 키보드로 전환됩니다.\n\n```auto hotkey\n$Esc::\n    if(IME_CHECK(\"A\"))\n        Send, {VK15}    ;영문이라면 한영전환 키를 입력해준다.\n    Send, {Escape}\n    return\n\n/*\n  IME check \n*/\nIME_CHECK(WinTitle) {\n  WinGet,hWnd,ID,%WinTitle%\n  Return Send_ImeControl(ImmGetDefaultIMEWnd(hWnd),0x005,\"\")\n}\nSend_ImeControl(DefaultIMEWnd, wParam, lParam) {\n  DetectSave := A_DetectHiddenWindows\n  DetectHiddenWindows,ON\n   SendMessage 0x283, wParam,lParam,,ahk_id %DefaultIMEWnd%\n  if (DetectSave <> A_DetectHiddenWindows)\n      DetectHiddenWindows,%DetectSave%\n  return ErrorLevel\n}\nImmGetDefaultIMEWnd(hWnd) {\n  return DllCall(\"imm32\\ImmGetDefaultIMEWnd\", Uint,hWnd, Uint)\n}\n```\n\n## Windows 실행시 자동으로 Script 시작하기\nScript를 실행파일(.exe)로 변환합니다.\n\n1. `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\AutoHotkey` 폴더로 이동합니다.\n2. `Convert .ahk to .exe`를 더블클릭하여 실행합니다.\n3. `Source`항목에서 앞서 작성한 `script.ahk`를 추가합니다.\n4. `Convert` 를 클릭합니다.\n5. 'Conversion complete' 팝업이 표시되면, .exe 파일이 스크립트와 같은 폴더에 생성됩니다.\n\n실행파일을 윈도우즈 시작프로그램으로 추가합니다.\n\n1. Windows 로고 키 + R을 누르고 `shell:startup`을 입력한 다음 확인을 선택합니다. 그러면 시작 폴더가 열립니다.\n2. 앞서 변환한 실행파일(.exe)을 복사하여 시작 폴더에 붙여넣습니다.\n\n# 출처\n* [https://github.com/johngrib/simple_vim_guide/blob/master/md/with_korean.md](https://github.com/johngrib/simple_vim_guide/blob/master/md/with_korean.md)\n* [https://www.autohotkey.com/](https://www.autohotkey.com/)\n* [Windows 10에서 시작할 때 자동으로 실행되는 앱 추가](https://support.microsoft.com/ko-kr/windows/windows-10%EC%97%90%EC%84%9C-%EC%8B%9C%EC%9E%91%ED%95%A0-%EB%95%8C-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94-%EC%95%B1-%EC%B6%94%EA%B0%80-150da165-dcd9-7230-517b-cf3c295d89dd)\n* [AHK Startup Under Windows 10](https://www.autohotkey.com/boards/viewtopic.php?t=15820)\n","mtime":"2022-08-13T00:12:20.000+09:00","href":"other/vim 영문 키보드 자동 전환","data":{"title":"[Vim] Normal모드에서 영문 키보드로 자동 전환하기 (Windows)","tags":["windows","wsl","vim","@all"],"page":null,"summary":"esc를 누르면 자동으로 영문 키보드가 된다.","date":"2022-08-06T20:00:32.948+09:00"}},"prev_post":{"name":"velog에서 git page로 블로그 이전","content":"\n# 왜 옮겼나?\n\n지난 몇달간 `velog`에서 몇몇 포스트를 작성했다.\n잘 만들어진 구성이다 보니 별다른 불만 없이 잘 사용했다.\n하지만 지난 며칠간의 연습 끝에 `git page`로 블로그를 이전했다.\n\n## 처음부터 `git page`를 쓰고 싶었다.\n\n사실 이전부터 `git page`로 블로그를 만들고 싶었다.\n가장 많이 알려진 간단한 방법은 `jekyll`를 사용하는 것이다.\n하지만 `ruby`로 작성된 엔진이다 보니 제대로 알아보는데 힘이 들었다.\n그렇다고 `ruby`를 따로 배워보자니, 살면서 `ruby`를 사용할 일이 얼마나 있을까 하는 생각이 문득 들었다.\n차라리 `go`나 `rust`라면 노력해보겠지만, `ruby`라니..\n\n그렇게 그냥 하지 말까? 하다가 알게된게 `velog`였다.\n`velog`는 내가 처음에 기대한 거의 모든 것을 만족했다.\n\n- 마크다운을 이용한 포스팅\n- 코드 블록 하이라이팅\n- 실시간 포스팅 프리뷰\n\n겨우 세가지지만 이 세가지를 만족하는 곳이 사실상 없다.\n그리고 따로 내가 레이아웃을 수정할 필요가 없다보니(사실 방법도 없다), 그냥 잘 만들어진 플랫폼에 글만 쓰면 내가 원하는게 다 됐다.\n\n## `velog`는 다 좋은데 이게 없다.\n\n하지만 쓰다보니 역시 아쉬운게 보인다.\n\n- 명확한 기준은 모르겠지만, 몇몇 양식에 대한 하이라이팅 미지원(log 등)\n- 작성글 숨기기\n\n그리고 무엇보다도.. 내가 직접 만든다는 성취감이 없었다.\n그래서 결국 직접 만들기로 했다.\n\n다만 `velog`덕분에 카테고리가 무조건 있어야 한다는 고정관념에서 벗어날 수 있었다.\n태그를 추가하면, 태그가 기존의 카테고리처럼 사용될 수 있게 하면 된다.\n또한 특정 포스트간의 연결이 필요하다면, 따로 지정할 수 있는 기능이 있으면 된다.\n\n`velog`에서 얻은 소중한 경험을 토대로, `git page`에 블로그를 만들기 위한 준비를 했다.\n\n# 어떻게 옮겼나?\n\n처음에는 그냥 익숙한 `python`으로 작성하려 했다.\n`pelican`이라는 라이브러리가 있어서, `jekyll`처럼 간단하게 정적 사이트를 배포할 수 있게 한다. 사용 언어가 `python`이다 보니 관련 스크립트를 확인하며, 작동 방식을 파악하는 것도 할만했다.\n\n하지만 반응형으로 작성해보려 하니, 결국 `javascript`를 쓸 수 밖에 없었다.\n그리고 어차피 `javascript`를 써야한다면.. 이번기회에 공부도 할 겸 완전히 `javascript`로 작성해보자는 생각이 들었다.\n\n여기서 `vue`냐, `react`냐 많은 고민이 있었고, 여러 시도가 있었는데, 결국 선택한건 `react`다.\n그리고 `react` 앱을 간단하게 작성하고 배포할 수 있는 프레임워크로 `nextjs`를 사용했다.\n\n처음 생각은 `javascript`였는데, `python`의 타입 힌트를 이용한 `vscode`의 자동완성 기능에 너무 익숙해져서 그런가, 코드 작성이 너무 불편했다.\n마침 `nextjs`가 `typescript`를 지원하기도 해서, 약간의 수고가 있었지만 `typescript`로 앱을 작성했다.\n\n많은 삽질끝에 그래도 `git page`에 배포할 수 있는 형태로 만드는데 성공했다.\n이제 부족한 몇몇 기능을 추가하고, 디자인을 손보기만 하면 된다.\n그러고보니... `typescript`보다 `css`가 더 어려운 것 같다..\n아무리 해도 예쁘게 보이지를 않는다..\n\n# 앞으로 추가할 기능\n\n- [ ] 다크모드 토글\n  > 사실 이미 기능 추가는 했지만, css 작성하기가 힘들어서 주석으로 놔둔 상태\n- [ ] 문단 제목 역링크\n- [ ] 코드 블럭 라인 하이라이트\n","mtime":"2022-08-13T00:12:20.000+09:00","href":"js/velog에서 git page로 블로그 이전","data":{"title":"velog에서 git page로 블로그 이전","tags":["js","ts","nextjs","velog","github","@all"],"page":null,"date":"2022-06-12T04:27:48.097+09:00","summary":"there is no summary"}},"next_post":{"name":"wsl2에서 pid 1을 systemd로 변경하기","content":"\n# `systemd`로 인한 에러\n`wsl2`(이하 `wsl`)를 그냥 실행할 경우, 다음과 같은 에러를 겪을 때가 있다.\n```bash\nSystem has not been booted with systemd as init system (PID 1). Can't operate.\n```\n\n이는 pid 1번이 `systemd` 가 아니어서 생기는 문제로, 해결하기 위해서는 [genie](https://github.com/arkane-systems/genie)와 같은 별도의 프로그램을 실행해줘야 했다. 하지만 최근 처음부터 이를 해결한 상태로 wsl을 실행하는 프로젝트를 발견했는데, 바로 [Distrod](https://github.com/nullpo-head/wsl-distrod)다.\n\n# `Distrod`를 사용하자\n`Distrod`를 설치하는 방법은 크게 두가지로 나뉘는데,\n하나는 이미 해당 패치가 적용된 배포판을 사용하거나,\n기존에 사용하던 `wsl`환경에 해당 패치를 적용하는 것이다.\n\n## 신규 설치\n[링크](https://github.com/nullpo-head/wsl-distrod/releases/latest/download/distrod_wsl_launcher-x86_64.zip)의 압축 파일을 해제하면, 단일 exe 파일이 존재하는데, 해당 실행 파일을 실행시키면 끝이다.\n\n굉장히 다양한 배포판(아치, 데비안, 젠투, 보이드 등)을 지원하기에, 대부분의 경우, 선택권을 제한당한다는 기분은 느끼지 못할 것이다.\n\n## 기존 환경에 패치\n이것 또한 아주 간단하다. \n1. 패치 스크립트를 다운로드 한 다음, 실행한다.(아직 적용되지 않았다.)\n```bash\ncurl -L -O \"https://raw.githubusercontent.com/nullpo-head/wsl-distrod/main/install.sh\"\nchmod +x install.sh\nsudo ./install.sh install\n```\n\n2. wsl이 처음 실행됐을 때, 다음 명령어를 관리자 권한으로 실행하던가,\n```bash\n/opt/distrod/bin/distrod enable\n```\n3. 또는 다음 명령어로 윈도우 스케쥴러에 자동으로 해당 패치가 정상적으로 실행될 수 있도록 한다.\n```bash\n/opt/distrod/bin/distrod enable --start-on-windows-boot\n```\n\n이제 ```ps -ef | head -n 2```으로 확인해보면,\n```bash\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 21:34 ?        00:00:00 /sbin/init systemd.setenv=WSL_DISTRO_NAME=Distrod systemd.setenv=WSL_INTEROP=/run/WSL/11_interop systemd.setenv=WSLENV=WT_SESSION::WT_PROFILE_ID --unit=multi-user.target\n```\n위와 같이 `distrod`의 패치가 적용된 것을 확인할 수 있다.\n\n## 윈도우11은 주의\n`distrod`의 기능 중, `wsl`의 특정 포트를 외부로 포워딩 할 수 있는 `portproxy`라는 서비스가 있는데, 윈도우 11에서는 정상적으로 작동하지 않는 [버그](https://github.com/nullpo-head/wsl-distrod/blob/main/docs/references.md#know-bugs)가 있다고 한다.\n","mtime":"2022-08-20T22:17:59.496+09:00","href":"other/wsl2에서 pid 1을 systemd로 변경하기","data":{"title":"wsl2에서 pid 1을 systemd로 변경하기","tags":["windows","wsl","@all"],"page":null,"summary":"잘 만들어놓은 배포판을 가져다 쓰자","date":"2022-08-14T22:13:27.850+09:00"}},"page_posts":null},"__N_SSG":true}