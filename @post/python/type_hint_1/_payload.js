export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq,cr,cs,ct,cu,cv,cw,cx,cy,cz,cA,cB,cC,cD,cE,cF,cG,cH,cI,cJ,cK,cL,cM,cN,cO,cP,cQ,cR,cS,cT,cU,cV,cW,cX,cY,cZ,c_,c$,da,db,dc,dd,de,df,dg,dh,di,dj,dk,dl,dm,dn,do0,dp,dq,dr,ds,dt,du,dv,dw,dx,dy,dz,dA,dB,dC,dD,dE,dF,dG,dH,dI,dJ,dK,dL,dM,dN,dO,dP,dQ,dR,dS,dT,dU,dV,dW,dX,dY,dZ,d_,d$,ea,eb,ec,ed,ee,ef,eg,eh,ei,ej,ek,el,em,en,eo,ep,eq,er,es,et,eu,ev,ew,ex,ey,ez,eA,eB,eC,eD,eE,eF,eG,eH,eI,eJ,eK,eL,eM,eN,eO,eP,eQ,eR,eS,eT,eU,eV,eW,eX,eY,eZ,e_,e$,fa,fb,fc,fd,fe,ff,fg,fh,fi,fj,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,fA,fB,fC,fD,fE,fF,fG,fH,fI,fJ,fK,fL,fM,fN,fO,fP,fQ,fR,fS,fT,fU,fV,fW,fX,fY,fZ,f_,f$,ga,gb,gc){return {data:{"selected_data_with_surround_/python/type_hint_1":{article:{_path:"\u002Fpython\u002Ftype_hint_1",_dir:z,_draft:a_,_partial:a_,_locale:A,_empty:a_,title:"[코드를 깔끔하게] type hint - 1",description:bE,tags:[z,"typehint"],page:"코드를_깔끔하게",date:"2023-02-13",publish:true,body:{type:"root",children:[{type:a,tag:aC,props:{id:bF},children:[{type:b,value:bG}]},{type:a,tag:j,props:{},children:[{type:b,value:"다음과 같이 간단한 함수를 정의할 수 있다."}]},{type:a,tag:o,props:{code:"def add_2(value):\n    return value + 2\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:$}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bH}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:a$}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"개발자의 의도대로 사용한다면 "},{type:a,tag:h,props:{},children:[{type:b,value:"value"}]},{type:b,value:"에 실수 값을 입력해서 "},{type:a,tag:h,props:{},children:[{type:b,value:$}]},{type:b,value:"를 사용할 것이다. 하지만 개발자가 아닌 다른 사람이 사용한다면 "},{type:a,tag:ad,props:{},children:[{type:b,value:"의도와 다르게 사용할 수도 있다."}]},{type:b,value:" 그러한 상황을 미연에 방지하고자 다음과 같이 주석을 작성할 수 있다."}]},{type:a,tag:o,props:{code:"def add_2(value):\n    \"\"\"Add 2 to value.\n\n    Args:\n        value: addable value\n\n    Returns:\n        Value with 2 added\n    \"\"\"\n    return value + 2\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:$}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bH}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bI}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bJ}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bK}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bL}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bM}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bN}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:a$}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"위 주석은 "},{type:a,tag:h,props:{},children:[{type:b,value:$}]},{type:b,value:"의 사용법을 명확하게 설명한다. 하지만 사람은 주석으로 함수의 사용법을 인지하지만, "},{type:a,tag:ad,props:{},children:[{type:b,value:"ide는 이를 인지하지 못한다."}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:ad,props:{},children:[{type:b,value:"ide가 함수의 상세한 타입 명세를 파악하지 못하면"}]},{type:b,value:" 문제가 발생할 때가 많다. 단순히 "},{type:a,tag:h,props:{},children:[{type:b,value:$}]},{type:b,value:"와 같은 함수를 사용한다면 상관없겠지만, 더 복잡하게 중첩된 경우, ide의 추론 기능을 활용하지 않으면 쓸데없이 "},{type:a,tag:ad,props:{},children:[{type:b,value:"시간을 낭비하게 된다."}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"따라서 타입힌트를 추가하여 사람도 ide도 파악할 수 있는 함수를 생성하는 것이 좋다. 다음은 타입힌트가 추가된 "},{type:a,tag:h,props:{},children:[{type:b,value:$}]},{type:b,value:"함수다."}]},{type:a,tag:o,props:{code:"def add_2(value: float) -\u003E float:\n    \"\"\"Add 2 to value.\n\n    Args:\n        value: addable value\n\n    Returns:\n        Value with 2 added\n    \"\"\"\n    return value + 2\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:$}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bO}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bI}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bJ}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bK}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bL}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bM}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:l},children:[{type:b,value:bN}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:a$}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"이제 ide는 "},{type:a,tag:h,props:{},children:[{type:b,value:$}]},{type:b,value:bP},{type:a,tag:h,props:{},children:[{type:b,value:S}]},{type:b,value:"타입의 변수를 받아서 "},{type:a,tag:h,props:{},children:[{type:b,value:S}]},{type:b,value:"타입의 값을 반환한다는 것을 인지할 수 있다. 이러한 타입힌트는 사용자가 함수를 잘못 사용하게 되는 경우를 줄이고, 가독성을 높여주며, ide의 추론 기능을 적극 사용할 수 있게 큰 도움을 준다. 즉, "},{type:a,tag:ad,props:{},children:[{type:b,value:"생산성이 향상된다."}]}]},{type:a,tag:aC,props:{id:bQ},children:[{type:b,value:bR}]},{type:a,tag:j,props:{},children:[{type:b,value:"타입 힌트가 파이썬에 추가되고 많은 시간이 지났다. 버전이 올라갈수록 새로운 기능을 추가하며 보완하다보니, 버전별 차이가 많다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"기본적으로 제공하는 "},{type:a,tag:h,props:{},children:[{type:b,value:bS}]},{type:b,value:"이라는 기본 라이브러리를 사용하여 타입힌트를 사용할 수 있으며, 상위 버전의 기능을 사용하기 위한 백포트로 "},{type:a,tag:h,props:{},children:[{type:b,value:aD}]},{type:b,value:"를 설치해서 사용할 수도 있다. 다만 "},{type:a,tag:h,props:{},children:[{type:b,value:aD}]},{type:b,value:"를 사용하더라도 "},{type:a,tag:ad,props:{},children:[{type:b,value:"문법 자체에 변화가 생긴 경우가 있으니 주의할 필요가 있다."}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"대표적으로 "},{type:a,tag:h,props:{},children:[{type:b,value:aE}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:ao}]},{type:b,value:" 등 빌트인 객체의 제네릭 적용 여부라던가, "},{type:a,tag:h,props:{},children:[{type:b,value:aF}]},{type:b,value:"에 대한 문법 설탕 추가가 있다."}]},{type:a,tag:aC,props:{id:bT},children:[{type:b,value:bU}]},{type:a,tag:j,props:{},children:[{type:a,tag:"a",props:{href:"https:\u002F\u002Fdocs.python.org\u002F3\u002Flibrary\u002Ftyping.html",rel:["nofollow"]},children:[{type:b,value:"공식문서"}]},{type:b,value:"를 참조하여 타입힌트를 사용하는 방법에 대해 하나씩 알아보자."}]},{type:a,tag:j,props:{},children:[{type:b,value:"하위 호환과 관련하여 주의하고 작성하겠지만, 그렇지 못한 경우가 있을 수 있다."}]},{type:a,tag:p,props:{id:bV},children:[{type:a,tag:h,props:{},children:[{type:b,value:bW}]}]},{type:a,tag:o,props:{code:"from typing import NewType\n\nUserId = NewType(\"UserId\", int)\nsome_id = UserId(524313)\n\nassert some_id == 524313\nassert isinstance(some_id, int)\n\n\ndef get_user_name(user_id: UserId) -\u003E str:\n    ...\n\n## passes type checking\nuser_a = get_user_name(UserId(42351))\n\n## fails type checking; an int is not a UserId\nuser_b = get_user_name(-1)\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" NewType"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"UserId "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" NewType("}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"UserId\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"some_id "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" UserId("}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:bX}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:ak}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" some_id "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:bX}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:ak}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aG}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(some_id, "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:bY}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(user_id: UserId) -\u003E "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## passes type checking"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"user_a "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" get_user_name(UserId("}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"42351"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ba}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## fails type checking; an int is not a UserId"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"user_b "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" get_user_name("}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"-"}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"특정 타입과 같은 타입을 표현하지만, 마치 특별한 타입인 것 처럼 표현할 수 있다."}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:bY}]},{type:b,value:"은 함수 내부에서 "},{type:a,tag:h,props:{},children:[{type:b,value:t}]},{type:b,value:"타입 변수인 "},{type:a,tag:h,props:{},children:[{type:b,value:"user_id"}]},{type:b,value:"를 사용하지만, "},{type:a,tag:h,props:{},children:[{type:b,value:t}]},{type:b,value:"타입 변수를 받는 것이 아닌 "},{type:a,tag:h,props:{},children:[{type:b,value:"UserId"}]},{type:b,value:"를 받는 것처럼 되어 있으므로, 유저에 대한 고유한 값이 아닌 별개의 값을 사용하는 것을 방지할 수 있다."}]},{type:a,tag:p,props:{id:bZ},children:[{type:a,tag:h,props:{},children:[{type:b,value:aH}]}]},{type:a,tag:o,props:{code:"from typing import Awaitable, Callable\n\n\ndef feeder(get_next_item: Callable[[], str]) -\u003E None:\n    ...\n\n\ndef async_query(\n    on_success: Callable[[int], None], on_error: Callable[[int, Exception], None]\n) -\u003E None:\n    ...\n\n\nasync def on_update(value: str) -\u003E None:\n    ...\n\n\ncallback: Callable[[str], Awaitable[None]] = on_update\nfunc: Callable[..., None] = feeder\nfunc2: Callable[..., None] = async_query\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Awaitable, Callable"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"feeder"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(get_next_item: Callable[[], "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:b_}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"async_query"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    on_success: Callable[["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aI}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"], on_error: Callable[["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aI}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:bb}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"on_update"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bO}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"callback: Callable[["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"], Awaitable["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:b$}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" on_update"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"func: Callable["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" feeder"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"func2: Callable["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" async_query"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"호출 가능한 타입을 표현한다. 대표적으로 함수가 있으며, "},{type:a,tag:h,props:{},children:[{type:b,value:ca}]},{type:b,value:" 메소드가 정의된 클래스를 의미한다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"파라미터와 반환 값의 타입을 직접 지정할 수도 있고, "},{type:a,tag:h,props:{},children:[{type:b,value:J}]},{type:b,value:"으로 생략할 수도 있다.(이 경우 ide는 파라미터에 대한 추론을 정확하게 하지 않는다)"}]},{type:a,tag:j,props:{},children:[{type:b,value:"현재 구조상 키워드 파라미터에 대해서는 타입힌트를 지원하지 않는다. 이를 사용하기 위해서는 "},{type:a,tag:h,props:{},children:[{type:b,value:af}]},{type:b,value:"을 사용해야 하는데, 이는 나중에 설명한다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"파라미터와 반환 값에 대한 제네릭 표현이 가능한데, 이는 "},{type:a,tag:h,props:{},children:[{type:b,value:aJ}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:ap}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:aK}]},{type:b,value:"와 같은 다른 클래스가 필요하므로 나중에 설명한다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"예시에는 "},{type:a,tag:h,props:{},children:[{type:b,value:bS}]},{type:b,value:"에서 "},{type:a,tag:h,props:{},children:[{type:b,value:aH}]},{type:b,value:"을 가져왔지만 "},{type:a,tag:h,props:{},children:[{type:b,value:"ruff"}]},{type:b,value:"와 같은 린팅 툴에서는 "},{type:a,tag:h,props:{},children:[{type:b,value:"collections.abc"}]},{type:b,value:" 사용을 권장하니 참고하기 바란다.(버전별 차이가 있을 수 있음)"}]},{type:a,tag:p,props:{id:cb},children:[{type:a,tag:h,props:{},children:[{type:b,value:aJ}]}]},{type:a,tag:o,props:{code:"from collections.abc import Sequence\nfrom typing import TypeVar\n\nT = TypeVar(\"T\")  ## Declare type variable\n\n\ndef first(values: Sequence[T]) -\u003E T:  ## Generic function\n    return values[0]\n\n\nfirst([1, 2, 3, 4, 5])  ## int\nfirst(\"abcde\")  ## str\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bc}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Sequence"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cc}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aL}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bd}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Declare type variable"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"first"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(values: Sequence[T]) -\u003E T:  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Generic function"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" values["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ag}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"first(["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aM}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"4"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"5"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"])  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## int"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"first("}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"abcde\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## str"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:aJ}]},{type:b,value:"는 임의의 변수를 나타낼 수 있게 한다. "},{type:a,tag:h,props:{},children:[{type:b,value:be}]},{type:b,value:" 파라미터를 사용하여 타입을 제한할 수도 있으며, "},{type:a,tag:h,props:{},children:[{type:b,value:"covariant"}]},{type:b,value:aN},{type:a,tag:h,props:{},children:[{type:b,value:"contravariant"}]},{type:b,value:" 파라미터를 사용하여 공변성을 변경할 수도 있다."}]},{type:a,tag:p,props:{id:cd},children:[{type:a,tag:h,props:{},children:[{type:b,value:aq}]}]},{type:a,tag:o,props:{code:"from typing import TypeVar, Generic\nfrom logging import Logger, getLogger\n\nT = TypeVar(\"T\")\nlogger = getLogger()\n\n\nclass LoggedVar(Generic[T]):\n    def __init__(self, value: T, name: str, logger: Logger) -\u003E None:\n        self.name = name\n        self.logger = logger\n        self.value = value\n\n    def set(self, new: T) -\u003E None:\n        self.log(\"Set \" + repr(self.value))\n        self.value = new\n\n    def get(self) -\u003E T:\n        self.log(\"Get \" + repr(self.value))\n        return self.value\n\n    def log(self, message: str) -\u003E None:\n        self.logger.info(\"%s: %s\", self.name, message)\n\n\nvlogger: LoggedVar[int] = LoggedVar(1, \"test\", logger)\n\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ce}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" logging "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Logger, getLogger"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aL}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bd}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"logger "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" getLogger()"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"LoggedVar"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(Generic[T]):"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:cf}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self, value: T, name: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:", logger: Logger) -\u003E "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:".name "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" name"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:".logger "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" logger"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cg}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ch}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ci}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self, new: T) -\u003E "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cj}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"Set \""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ck}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cl}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cg}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" new"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"get"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self) -\u003E T:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cj}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"Get \""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ck}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cl}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:".value"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"log"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self, message: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:".logger.info("}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bf}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:cm}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:cm}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bf}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:".name, message)"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"vlogger: LoggedVar["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" LoggedVar("}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bg}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:", logger)"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:aq}]},{type:b,value:"은 제네릭 클래스를 생성할 수 있게 한다. 위 예시에서는 하나의 변수에 대해서만 작성했지만, 두개 이상을 사용해도 아무 문제가 없다. 중첩해서 사용하거나 상속받아 사용해도 아무 문제 없다."}]},{type:a,tag:p,props:{id:cn},children:[{type:a,tag:h,props:{},children:[{type:b,value:ap}]}]},{type:a,tag:o,props:{code:"from typing import TypeVar, ParamSpec, Callable, Tuple\n\nParamT = ParamSpec(\"ParamT\")\nValueT = TypeVar(\"ValueT\")\n\n\ndef echo_params(func: Callable[ParamT, ValueT]) -\u003E Callable[ParamT, ValueT]:\n    def inner(*args: ParamT.args, **kwargs: ParamT.kwargs) -\u003E ValueT:\n        print(args, kwargs)\n        return func(*args, **kwargs)\n\n    return inner\n\n\n@echo_params\ndef get_value(x: int, y: str, z: float) -\u003E Tuple[int, str, float]:\n    return (x, y, z)\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" TypeVar, ParamSpec, Callable, Tuple"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"ParamT "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:co}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"ParamT\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:cp}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:cq}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"echo_params"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(func: Callable[ParamT, ValueT]) -\u003E Callable[ParamT, ValueT]:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:cr}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"args: ParamT.args, "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:aO}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"kwargs: ParamT.kwargs) -\u003E ValueT:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ar}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(args, kwargs)"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" func("}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cs}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:aO}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ct}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cu}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:w},children:[{type:b,value:"@echo_params"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"get_value"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(x: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cv}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cw}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:") -\u003E Tuple["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:as}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" (x, y, z)"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:ap}]},{type:b,value:"은 호출 가능한 객체가 받는 파라미터에 대한 일반적인 표현을 가능하게 한다. 위 예제는 데코레이터를 표현하는 간단한 형태의 예제다. "},{type:a,tag:h,props:{},children:[{type:b,value:"Concatename"}]},{type:b,value:"와 함께 사용한다면 더 강력한 표현이 가능하다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"3.10부터 사용할 수 있으므로 이전 버전에서는 "},{type:a,tag:h,props:{},children:[{type:b,value:aD}]},{type:b,value:"이 필요하다."}]},{type:a,tag:p,props:{id:cx},children:[{type:a,tag:h,props:{},children:[{type:b,value:cy}]}]},{type:a,tag:o,props:{code:"from typing import Any\n\na: Any = None\na = []  ## OK\na = 2  ## OK\n\ns: str = \"\"\ns = a  ## OK\n\n\ndef foo(item: Any) -\u003E int:\n    ## Passes type checking; 'item' could be any type,\n    ## and that type might have a 'bar' method\n    item.bar()\n    ...\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Any"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"a: Any "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aP}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" []  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:aQ}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aP}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:aQ}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"s: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"\""}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"s "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bh}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:aQ}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:cz}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(item: Any) -\u003E "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Passes type checking; 'item' could be any type,"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## and that type might have a 'bar' method"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    item.bar()"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"타입과 무관하게 작동하거나, 타입을 무시하고 싶을 때 사용할 수 있다. "},{type:a,tag:h,props:{},children:[{type:b,value:"typescript"}]},{type:b,value:"의 "},{type:a,tag:h,props:{},children:[{type:b,value:"as any"}]},{type:b,value:"와 같다고 볼 수 있다.\n분명 필요하지만 남용하면 타입힌트를 쓰지 않은 것과 같으니 조절해서 사용해야한다."}]},{type:a,tag:p,props:{id:cA},children:[{type:a,tag:h,props:{},children:[{type:b,value:cB}]}]},{type:a,tag:o,props:{code:"from typing_extensions import LiteralString\n\ndef run_query(sql: LiteralString) -\u003E ...\n    ...\n\ndef caller(arbitrary_string: str, literal_string: LiteralString) -\u003E None:\n    run_query(\"SELECT * FROM students\")  ## ok\n    run_query(literal_string)  ## ok\n    run_query(\"SELECT * FROM \" + literal_string)  ## ok\n    run_query(arbitrary_string)  ## type checker error\n    run_query(  ## type checker error\n        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n    )\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ah}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" LiteralString"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"run_query"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(sql: LiteralString) -\u003E "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" caller(arbitrary_string: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:", literal_string: LiteralString) "}]},{type:a,tag:c,props:{class:"ct-3bb124"},children:[{type:b,value:"-\u003E"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:cC}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"SELECT * FROM students\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:bi}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    run_query(literal_string)  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:bi}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:cC}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"SELECT * FROM \""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" literal_string)  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:bi}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    run_query(arbitrary_string)  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:bj}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    run_query(  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:bj}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"f"}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"SELECT * FROM students WHERE name = "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"{"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"arbitrary_string"}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"}"}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bf}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    )"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"3.11에 추가됐다. "},{type:a,tag:h,props:{},children:[{type:b,value:at}]},{type:b,value:"을 사용하여 표현된 문자열을 나타낸다. "},{type:a,tag:h,props:{},children:[{type:b,value:at}]},{type:b,value:" 변수를 그대로 사용하거나, "},{type:a,tag:h,props:{},children:[{type:b,value:at}]},{type:b,value:"변수를 사용하여 만들어진 문자열을 허용하지만 단순한 문자열은 허용하지 않는다."}]},{type:a,tag:p,props:{id:cD},children:[{type:a,tag:h,props:{},children:[{type:b,value:bk}]}]},{type:a,tag:o,props:{code:"from typing_extensions import Never\n\n\ndef never_call_me(arg: Never) -\u003E None:\n    pass\n\n\ndef int_or_str(arg: int | str) -\u003E None:\n    never_call_me(arg)  ## type checker error\n    match arg:\n        case int():\n            print(\"It's an int\")\n        case str():\n            print(\"It's a str\")\n        case _:\n            never_call_me(arg)  ## ok, arg is of type Never\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ah}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Never"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"never_call_me"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(arg: Never) -\u003E "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"pass"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"int_or_str"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(arg: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:au}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    never_call_me(arg)  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:bj}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"match"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" arg:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:bl}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cE}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:cF}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ar}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"It's an int\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:bl}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cE}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:cF}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ar}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"It's a str\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:bl}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" _:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"            never_call_me(arg)  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## ok, arg is of type Never"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"3.11에 추가됐다. 호출되면 안되는 함수를 표현할때 사용하라고 하는데, 개인적으로 의도를 잘 파악하기 힘들다. "},{type:a,tag:h,props:{},children:[{type:b,value:al}]},{type:b,value:"과 비슷한 컨셉으로 만들어졌다고 하는데, "},{type:a,tag:h,props:{},children:[{type:b,value:al}]},{type:b,value:"은 유용하지만 "},{type:a,tag:h,props:{},children:[{type:b,value:bk}]},{type:b,value:"는 아직 잘 모르겠다."}]},{type:a,tag:p,props:{id:cG},children:[{type:a,tag:h,props:{},children:[{type:b,value:al}]}]},{type:a,tag:o,props:{code:"from typing import NoReturn\n\n\ndef stop() -\u003E NoReturn:\n    raise RuntimeError(\"no way\")\n\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" NoReturn"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"stop"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"() -\u003E NoReturn:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"raise"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"RuntimeError"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"no way\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:al}]},{type:b,value:"은 함수의 반환 값을 표현할 때 사용된다. 그 함수가 어떠한 변수도 반환하지 않을 때("},{type:a,tag:h,props:{},children:[{type:b,value:N}]},{type:b,value:"을 반환하는 것은 "},{type:a,tag:h,props:{},children:[{type:b,value:N}]},{type:b,value:"값을 반환하는 것이므로 "},{type:a,tag:h,props:{},children:[{type:b,value:al}]},{type:b,value:"이 아니다.)를 나타내는 것으로, 에러 등의 비정상적인 상황이 발생하는 것이 분명할 때 사용된다."}]},{type:a,tag:p,props:{id:Q},children:[{type:a,tag:h,props:{},children:[{type:b,value:bm}]}]},{type:a,tag:o,props:{code:"from typing_extensions import Self\n\n\nclass Foo:\n    def return_self(self) -\u003E Self:\n        ...\n        return self\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ah}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Self"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:cH}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:cI}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self) -\u003E Self:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"3.11에 추가됐다. 클래스의 메소드가 자기 자신을 반환할 때 사용한다. 이전 버전에서도 다음과 같은 방식으로 구현이 가능했지만, "},{type:a,tag:h,props:{},children:[{type:b,value:bm}]},{type:b,value:"를 사용하면 더 간결하다."}]},{type:a,tag:o,props:{code:"from typing import TypeVar\n\nSelf = TypeVar(\"Self\", bound=\"Foo\")\n\n\nclass Foo:\n    def return_self(self: Self) -\u003E Self:\n        ...\n        return self\n\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cc}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"Self "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"Self\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:be}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"Foo\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:cH}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:cI}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self: Self) -\u003E Self:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]}]}]}]}]},{type:a,tag:p,props:{id:cJ},children:[{type:a,tag:h,props:{},children:[{type:b,value:bn}]}]},{type:a,tag:o,props:{code:"from typing import Tuple\nfrom typing_extensions import TypeAlias, TypeVar\n\nValueT = TypeVar(\"ValueT\")\nErrorT = TypeVar(\"ErrorT\", bound=BaseException)\nResult: TypeAlias = Tuple[ValueT] | Tuple[ErrorT]\nMaybeResult = Tuple[ValueT] | Tuple[ErrorT]\n\nresult: Result[int, Exception] = (1,)\nerror: Result[int, Exception] = (Exception(\"test\"),)\n\nresult2: MaybeResult[int, Exception] = (1,)\nerror2: MaybeResult[int, Exception] = (Exception(\"test\"),)\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cK}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ah}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" TypeAlias, TypeVar"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:cp}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:cq}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"ErrorT "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"ErrorT\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:be}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"BaseException"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"Result: TypeAlias "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cL}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:au}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cM}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"MaybeResult "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cL}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:au}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cM}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"result: Result["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ai}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cN}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"error: Result["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ai}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bg}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cO}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"result2: MaybeResult["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ai}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cN}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"error2: MaybeResult["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ai}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bg}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cO}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"복잡하게 정의된 타입 힌트를 변수에 할당할 때, 이를 명시하기 위해 사용된다.\n예시의 "},{type:a,tag:h,props:{},children:[{type:b,value:"MaybeResult"}]},{type:b,value:"처럼 "},{type:a,tag:h,props:{},children:[{type:b,value:bn}]},{type:b,value:"를 명시하지 않아도 ide에서 잘 추론하지만, 작성하는게 나중에 확인하기 좋다."}]},{type:a,tag:p,props:{id:av},children:[{type:a,tag:h,props:{},children:[{type:b,value:aw}]}]},{type:a,tag:o,props:{code:"from typing import Tuple\n\na: Tuple[int, str] = (1, \"a\")  ## correct\nb: Tuple[int] = a  ## incorrect\nc: Tuple[int, ...] = a  ## incorrect\nd: Tuple[int, ...] = (1, 1, 1)  ## correct\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cK}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"a: Tuple["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ai}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bo}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:am}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"b: Tuple["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bh}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:ax}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"c: Tuple["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bh}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:ax}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"d: Tuple["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ai}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:am}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:aw}]},{type:b,value:"은 튜플 타입의 각 위치별 타입을 명확하게 할 때 사용한다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"3.9부터 "},{type:a,tag:h,props:{},children:[{type:b,value:aw}]},{type:b,value:"대신 빌트인의 "},{type:a,tag:h,props:{},children:[{type:b,value:av}]},{type:b,value:"을 사용할 수 있다. "},{type:a,tag:h,props:{},children:[{type:b,value:aw}]},{type:b,value:cP},{type:a,tag:h,props:{},children:[{type:b,value:bp}]},{type:b,value:cQ},{type:a,tag:h,props:{},children:[{type:b,value:bq}]},{type:b,value:"와 같은 빌트인 객체들에도 적용됐는데, 덕분에 훨씬 편해졌다."}]},{type:a,tag:p,props:{id:cR},children:[{type:a,tag:h,props:{},children:[{type:b,value:aF}]}]},{type:a,tag:o,props:{code:"from typing import Union\n\nUnion[Union[int, str], float] == Union[int, str, float]\nUnion[int] == int  ## 문법상 에러가 발생하지만, 의미상 동일하다.\nUnion[int, str, int] == Union[int, str] == int | str  ## 3.10부터 |를 사용할 수 있다.\nUnion[int, str] == Union[str, int]\n\na: Union[int, str] = 1  ## correct\na = \"asd\"  ## correct\na = 0.3  ## incorrect\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Union"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"Union[Union["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aI}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:br}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:bs}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## 문법상 에러가 발생하지만, 의미상 동일하다."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:bs}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:br}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:au}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## 3.10부터 |를 사용할 수 있다."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:bs}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:br}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"a: Union["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:am}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aP}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"asd\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:am}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aP}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"0.3"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:ax}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"두개 이상의 타입을 함께 표현할 때 사용된다. 함수를 표현할 때, "},{type:a,tag:h,props:{},children:[{type:b,value:"nullable"}]},{type:b,value:"한 파라미터를 표현할때 주로 사용한다.("},{type:a,tag:h,props:{},children:[{type:b,value:bt}]},{type:b,value:"을 사용할 수도 있다.)"}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:aF}]},{type:b,value:"을 사용하는 것 보다 3.10에 추가된 "},{type:a,tag:h,props:{},children:[{type:b,value:au}]},{type:b,value:" 문법을 사용하는 것이 훨씬 편하지만 하위 호환성을 고려하고 사용해야 한다."}]},{type:a,tag:p,props:{id:cS},children:[{type:a,tag:h,props:{},children:[{type:b,value:bt}]}]},{type:a,tag:o,props:{code:"from typing import Optional\n\n\ndef foo(arg: Optional[int] = None) -\u003E None:\n    ...\n\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Optional"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:cz}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(arg: Optional["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"Optional[int]"}]},{type:b,value:aR},{type:a,tag:h,props:{},children:[{type:b,value:"Union[int, None]"}]},{type:b,value:aN},{type:a,tag:h,props:{},children:[{type:b,value:"int | None"}]},{type:b,value:"과 같다."}]},{type:a,tag:p,props:{id:cT},children:[{type:a,tag:h,props:{},children:[{type:b,value:aK}]}]},{type:a,tag:o,props:{code:"from collections.abc import Callable\nfrom threading import Lock\nfrom typing import Concatenate, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n\n## Use this lock to ensure that only one thread is executing a function\n## at any time.\nmy_lock = Lock()\n\n\ndef with_lock(f: Callable[Concatenate[Lock, P], R]) -\u003E Callable[P, R]:\n    \"\"\"A type-safe decorator which provides a lock.\"\"\"\n\n    def inner(*args: P.args, **kwargs: P.kwargs) -\u003E R:\n        ## Provide the lock as the first argument.\n        return f(my_lock, *args, **kwargs)\n\n    return inner\n\n\n@with_lock\ndef sum_threadsafe(lock: Lock, numbers: list[float]) -\u003E float:\n    \"\"\"Add a list of numbers together in a thread-safe manner.\"\"\"\n    with lock:\n        return sum(numbers)\n\n\n## We don't need to pass in the lock ourselves thanks to the decorator.\nsum_threadsafe([1.1, 2.2, 3.3])\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bc}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Callable"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" threading "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Lock"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Concatenate, ParamSpec, TypeVar"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"P "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:co}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"P\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"R "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"R\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Use this lock to ensure that only one thread is executing a function"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## at any time."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"my_lock "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Lock()"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"with_lock"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(f: Callable[Concatenate[Lock, P], R]) -\u003E Callable[P, R]:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"\"\"A type-safe decorator which provides a lock.\"\"\""}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:cr}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"args: P.args, "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:aO}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"kwargs: P.kwargs) -\u003E R:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Provide the lock as the first argument."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" f(my_lock, "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cs}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:aO}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ct}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cu}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:w},children:[{type:b,value:"@with_lock"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:cU}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(lock: Lock, numbers: list["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:b_}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"\"\"Add a list of numbers together in a thread-safe manner.\"\"\""}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"with"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" lock:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"sum"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(numbers)"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## We don't need to pass in the lock ourselves thanks to the decorator."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"sum_threadsafe(["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"1.1"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"2.2"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"3.3"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cV}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:ap}]},{type:b,value:"으로 함수의 파라미터를 표현할 수 있지만, 그 파라미터 각각의 타입을 명시하기 위해서는 "},{type:a,tag:h,props:{},children:[{type:b,value:aK}]},{type:b,value:"를 함께 사용해야 한다. 위 예시에서 작성된 코드를 ide에서 확인해보면 "},{type:a,tag:h,props:{},children:[{type:b,value:cU}]},{type:b,value:"함수가 받는 파라미터에서 "},{type:a,tag:h,props:{},children:[{type:b,value:"lock"}]},{type:b,value:"이 제거된 것을 확인할 수 있다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"키워드 파라미터에 대해서는 여전히 표현이 불가능하며, 필요하다면 "},{type:a,tag:h,props:{},children:[{type:b,value:af}]},{type:b,value:"을 사용해야 한다."}]},{type:a,tag:p,props:{id:bu},children:[{type:b,value:cW}]},{type:a,tag:o,props:{code:"from typing import Type\n\n\nclass User:\n    ...\n\n\nclass BasicUser(User):\n    ...\n\n\nclass ProUser(User):\n    ...\n\n\nclass TeamUser(User):\n    ...\n\n\n## Accepts User, BasicUser, ProUser, TeamUser, ...\ndef make_new_user(user_class: Type[User]) -\u003E User:\n    ## ...\n    return user_class()\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Type"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:aS}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"BasicUser"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aS}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ab}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"ProUser"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aS}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ab}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"TeamUser"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aS}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ab}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Accepts User, BasicUser, ProUser, TeamUser, ..."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"make_new_user"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(user_class: Type[User]) -\u003E User:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## ..."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" user_class()"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"인스턴스가 아닌 클래스에 대해 표현할 때 사용한다. 3.9버전부터 "},{type:a,tag:h,props:{},children:[{type:b,value:bu}]},{type:b,value:"으로 대체할 수 있다."}]},{type:a,tag:p,props:{id:cX},children:[{type:a,tag:h,props:{},children:[{type:b,value:at}]}]},{type:a,tag:o,props:{code:"from typing import Literal, Any\n\n\ndef validate_simple(data: Any) -\u003E Literal[True]:  ## always returns True\n    ...\n\n\nMODE = Literal[\"r\", \"rb\", \"w\", \"wb\"]\n\n\ndef open_helper(file: str, mode: MODE) -\u003E str:\n    ...\n\n\nopen_helper(\"\u002Fsome\u002Fpath\", \"r\")  ## Passes type check\nopen_helper(\"\u002Fother\u002Fpath\", \"typo\")  ## Error in type checker\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Literal, Any"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"validate_simple"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(data: Any) -\u003E Literal["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:cY}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"]:  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## always returns True"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:i},children:[{type:b,value:cZ}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Literal["}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:c_}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"rb\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"w\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"wb\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"open_helper"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(file: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:", mode: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:cZ}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:c$}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"\u002Fsome\u002Fpath\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:c_}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Passes type check"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:c$}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"\u002Fother\u002Fpath\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"typo\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Error in type checker"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"특정한 값을 지정해야 할 때 사용한다. "},{type:a,tag:h,props:{},children:[{type:b,value:v}]},{type:b,value:"이나 "},{type:a,tag:h,props:{},children:[{type:b,value:"bool"}]},{type:b,value:cP},{type:a,tag:h,props:{},children:[{type:b,value:t}]},{type:b,value:cQ},{type:a,tag:h,props:{},children:[{type:b,value:S}]},{type:b,value:" 등 다른 타입도 가능하다."}]},{type:a,tag:p,props:{id:da},children:[{type:a,tag:h,props:{},children:[{type:b,value:db}]}]},{type:a,tag:o,props:{code:"from typing import ClassVar\n\n\nclass Starship:\n    stats: ClassVar[dict[str, int]] = {}  ## class variable\n    damage: int = 10  ## instance variable\n\n    def __init__(self, value: int) -\u003E None:\n        self.damage = value\n\n\nenterprise_d = Starship(3000)\nenterprise_d.stats = {}  ## Error, setting class variable on instance\nStarship.stats = {}  ## This is OK\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" ClassVar"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"Starship"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    stats: ClassVar[dict["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:b$}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aT}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## class variable"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    damage: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:dc}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## instance variable"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:cf}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self, value: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:Q}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:".damage "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ch}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"enterprise_d "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Starship("}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"3000"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"enterprise_d.stats "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aT}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Error, setting class variable on instance"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"Starship.stats "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aT}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## This is OK"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"클래스 변수와 인스턴스의 변수를 구분짓기 위해 사용된다. 런타임 중 제약이 생기는 것은 아니지만, 개발자에게 충분한 경고를 제시한다."}]},{type:a,tag:p,props:{id:dd},children:[{type:a,tag:h,props:{},children:[{type:b,value:de}]}]},{type:a,tag:o,props:{code:"from typing import Final\n\nMAX_SIZE: Final[int] = 9000\nMAX_SIZE += 1  ## Error reported by type checker\n\n\nclass Connection:\n    TIMEOUT: Final[int] = 10\n\n\nclass FastConnector(Connection):\n    TIMEOUT = 1  ## Error reported by type checker\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Final"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:i},children:[{type:b,value:bv}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:df}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"9000"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:i},children:[{type:b,value:bv}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"+="}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:dg}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:dh}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:di}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:df}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:dc}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"FastConnector"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:dh}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ab}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:di}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:_}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:dg}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"불변 값을 표현할 때 사용한다. 예시의 "},{type:a,tag:h,props:{},children:[{type:b,value:bv}]},{type:b,value:aR},{type:a,tag:h,props:{},children:[{type:b,value:"mypy"}]},{type:b,value:"에서 정상적으로 인식하겠지만, 아쉽게도 "},{type:a,tag:h,props:{},children:[{type:b,value:"pylance"}]},{type:b,value:"에서는 에러를 발생시키지 못했다.."}]},{type:a,tag:p,props:{id:dj},children:[{type:a,tag:h,props:{},children:[{type:b,value:dk}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:dl}]}]},{type:a,tag:o,props:{code:"from typing import TypedDict\nfrom typing_extensions import Required, NotRequired\n\n\nclass SomeDict(TypedDict):\n    a: Required[int]\n    b: NotRequired[int]\n\n\na: SomeDict = {}  ## incorrect\nb: SomeDict = {\"a\": 1}  ## correct\nc: SomeDict = {\"a\": 1, \"b\": 2}  ## correct\nd: SomeDict = {\"b\": 2}  ## incorrect\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:dm}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ah}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Required, NotRequired"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"SomeDict"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ay}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ab}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    a: Required["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    b: NotRequired["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"a: SomeDict "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aT}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:ax}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"b: SomeDict "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:az}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bo}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aA}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:am}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"c: SomeDict "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:az}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bo}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dn}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aA}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:am}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"d: SomeDict "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:az}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dn}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aA}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:ax}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:ay}]},{type:b,value:"의 아이템 필수 여부를 표현하는데 사용한다.\n3.11에서 새로 추가됐으므로 "},{type:a,tag:h,props:{},children:[{type:b,value:aD}]},{type:b,value:"를 사용해야 할 수 있다."}]},{type:a,tag:p,props:{id:do0},children:[{type:a,tag:h,props:{},children:[{type:b,value:dp}]}]},{type:a,tag:"blockquote",props:{},children:[{type:a,tag:j,props:{},children:[{type:b,value:"파악중"}]}]},{type:a,tag:p,props:{id:dq},children:[{type:a,tag:h,props:{},children:[{type:b,value:aU}]}]},{type:a,tag:o,props:{code:"from typing import TypeGuard\n\n\ndef is_str_list(val: list[object]) -\u003E TypeGuard[list[str]]:\n    \"\"\"Determines whether all objects in the list are strings\"\"\"\n    return all(isinstance(x, str) for x in val)\n\n\ndef func1(val: list[object]):\n    if is_str_list(val):\n        ## Type of ``val`` is narrowed to ``list[str]``.\n        print(\" \".join(val))\n    else:\n        ## Type of ``val`` remains as ``list[object]``.\n        print(\"Not a list of strings!\")\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" TypeGuard"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"is_str_list"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:dr}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ds}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"]) -\u003E TypeGuard[list["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"]]:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"\"\"Determines whether all objects in the list are strings\"\"\""}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"all"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aG}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(x, "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:dt}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:du}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" x "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:dv}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" val)"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"func1"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:dr}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ds}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"]):"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:dw}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" is_str_list(val):"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Type of ``val`` is narrowed to ``list[str]``."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ar}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\" \""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:".join(val))"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"else"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Type of ``val`` remains as ``list[object]``."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ar}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"Not a list of strings!\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:aU}]},{type:b,value:bP},{type:a,tag:h,props:{},children:[{type:b,value:cY}]},{type:b,value:"를 반환한 콘텍스트 내부에서 "},{type:a,tag:h,props:{},children:[{type:b,value:"val"}]},{type:b,value:"에 해당하는 값의 타입은 "},{type:a,tag:h,props:{},children:[{type:b,value:aU}]},{type:b,value:"가 보장하는(위 예시에서는 "},{type:a,tag:h,props:{},children:[{type:b,value:"list[str]"}]},{type:b,value:") 타입으로 표현된다."}]},{type:a,tag:j,props:{},children:[{type:b,value:dx},{type:a,tag:h,props:{},children:[{type:b,value:aG}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:"issubclass"}]},{type:b,value:"와 비슷하지만 좀 더 자유롭게 구성할 수 있다."}]},{type:a,tag:p,props:{id:dy},children:[{type:a,tag:h,props:{},children:[{type:b,value:dz}]}]},{type:a,tag:o,props:{code:"from typing import TypeVar, Generic\nfrom typing_extensions import TypeVarTuple\n\n\nT = TypeVar('T')\nTs = TypeVarTuple('Ts')\n\ndef move_first_element_to_last(tup: tuple[T, *Ts]) -\u003E tuple[*Ts, T]:\n    return (*tup[1:], tup[0])\n\n## T is bound to int, Ts is bound to ()\n## Return value is (1,), which has type tuple[int]\nmove_first_element_to_last(tup=(1,))\n\n## T is bound to int, Ts is bound to (str,)\n## Return value is ('spam', 1), which has type tuple[str, int]\nmove_first_element_to_last(tup=(1, 'spam'))\n\n## T is bound to int, Ts is bound to (str, float)\n## Return value is ('spam', 3.0, 1), which has type tuple[str, float, int]\nmove_first_element_to_last(tup=(1, 'spam', 3.0))\n\n## This fails to type check (and fails at runtime)\n## because tuple[()] is not compatible with tuple[T, *Ts]\n## (at least one element is required)\nmove_first_element_to_last(tup=())\n\nShape = TypeVarTuple('Shape')\nclass Array(Generic[*Shape]):\n    def __getitem__(self, key: tuple[*Shape]) -\u003E float: ...\n    def __abs__(self) -\u003E \"Array[*Shape]\": ...\n    def get_shape(self) -\u003E tuple[*Shape]: ...\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ce}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ah}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" TypeVarTuple"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aL}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'T'"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:dA}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bw}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'Ts'"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"move_first_element_to_last"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(tup: tuple[T, "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"Ts]) -\u003E tuple["}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"Ts, T]:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ai}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"tup["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:":], tup["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ag}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cV}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## T is bound to int, Ts is bound to ()"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Return value is (1,), which has type tuple[int]"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aV}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:aW}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:",))"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## T is bound to int, Ts is bound to (str,)"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Return value is ('spam', 1), which has type tuple[str, int]"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aV}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:aW}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dB}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ba}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## T is bound to int, Ts is bound to (str, float)"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Return value is ('spam', 3.0, 1), which has type tuple[str, float, int]"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aV}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:aW}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dB}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"3.0"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ba}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## This fails to type check (and fails at runtime)"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## because tuple[()] is not compatible with tuple[T, *Ts]"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## (at least one element is required)"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aV}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:aW}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"())"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"Shape "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bw}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'Shape'"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"Array"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(Generic["}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"Shape]):"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"__getitem__"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self, key: tuple["}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"Shape]) -\u003E "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:dC}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self) -\u003E "}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"Array[*Shape]\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"get_shape"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self) -\u003E tuple["}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"Shape]: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:av}]},{type:b,value:"에 대해 언팩을 표현하기 위한 것으로 보이는데, 3.11에 추가됐고 명확하게 어떻게 사용해야 할지 모르겠어서, 아직 사용해본 적이 없다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"3.11 이전 버전에서는 타입힌트에 대한 언팩 자체를 허용하지 않으므로 "},{type:a,tag:h,props:{},children:[{type:b,value:bx}]},{type:b,value:"과 함께 사용해야 한다."}]},{type:a,tag:p,props:{id:dD},children:[{type:a,tag:h,props:{},children:[{type:b,value:bx}]}]},{type:a,tag:o,props:{code:"## In older versions of Python, TypeVarTuple and Unpack\n## are located in the `typing_extensions` backports package.\nfrom typing_extensions import TypeVarTuple, Unpack\n\nTs = TypeVarTuple(\"Ts\")\ntup: tuple[*Ts]         ## Syntax error on Python \u003C= 3.10!\ntup: tuple[Unpack[Ts]]  ## Semantically equivalent, and backwards-compatible\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## In older versions of Python, TypeVarTuple and Unpack"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:r},children:[{type:b,value:"## are located in the `typing_extensions` backports package."}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ah}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" TypeVarTuple, Unpack"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:dA}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bw}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"Ts\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"tup: tuple["}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"Ts]         "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Syntax error on Python \u003C= 3.10!"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"tup: tuple[Unpack[Ts]]  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Semantically equivalent, and backwards-compatible"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"3.11 미만의 버전에서 "},{type:a,tag:h,props:{},children:[{type:b,value:"tup: tuple[*Ts]"}]},{type:b,value:"는 에러가 발생한다. 따라서 의미상 동일한 "},{type:a,tag:h,props:{},children:[{type:b,value:"tup: tuple[Unpack[Ts]]"}]},{type:b,value:"를 사용해야 한다."}]},{type:a,tag:p,props:{id:dE},children:[{type:a,tag:h,props:{},children:[{type:b,value:dF}]}]},{type:a,tag:o,props:{code:"from typing import AnyStr\n\n\ndef concat(a: AnyStr, b: AnyStr) -\u003E AnyStr:\n    return a + b\n\n\nconcat(\"foo\", \"bar\")  ## Ok, output has type 'unicode'\nconcat(b\"foo\", b\"bar\")  ## Ok, output has type 'bytes'\nconcat(\"foo\", b\"bar\")  ## Error, cannot mix unicode and bytes\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" AnyStr"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"concat"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(a: AnyStr, b: AnyStr) -\u003E AnyStr:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" a "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" b"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:by}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bz}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bA}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Ok, output has type 'unicode'"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:by}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:bB}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bz}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:bB}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bA}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Ok, output has type 'bytes'"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:by}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bz}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:bB}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bA}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:W}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Error, cannot mix unicode and bytes"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:v}]},{type:b,value:aN},{type:a,tag:h,props:{},children:[{type:b,value:dG}]},{type:b,value:"를 함께 표현하는데, 한 스코프 내에서 같이 쓰이는 경우, 그 변수들은 모두 "},{type:a,tag:h,props:{},children:[{type:b,value:v}]},{type:b,value:"이거나 모두 "},{type:a,tag:h,props:{},children:[{type:b,value:dG}]},{type:b,value:"이어야 한다. 섞어서 쓸 수 없다.("},{type:a,tag:h,props:{},children:[{type:b,value:"AnyStr = TypeVar('AnyStr', str, bytes)"}]},{type:b,value:"로 정의되기 때문이다.)"}]},{type:a,tag:p,props:{id:dH},children:[{type:a,tag:h,props:{},children:[{type:b,value:af}]}]},{type:a,tag:o,props:{code:"from typing import Protocol\n\n\nclass Test(Protocol):\n    def __call__(self, x: int, *, y: str, z: int) -\u003E tuple[int, str, int]:\n        ...\n\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Protocol"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"Test"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:af}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ab}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ca}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(self, x: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:U}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cv}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:cw}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:") -\u003E tuple["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:as}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:G}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:af}]},{type:b,value:"은 특정 클래스의 내부 메소드 구현에 대해 명확하게 표현할 수 있게 한다. 앞서 설명한 "},{type:a,tag:h,props:{},children:[{type:b,value:aH}]},{type:b,value:"만으로 함수를 설명하기 어렵다면 "},{type:a,tag:h,props:{},children:[{type:b,value:af}]},{type:b,value:"로 대신할 수 있다. 그 외에도 많은 용례가 있다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"덕타이핑을 위해 종종 사용된다."}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Generic"}]}]},{type:a,tag:p,props:{id:dI},children:[{type:a,tag:h,props:{},children:[{type:b,value:bC}]}]},{type:a,tag:o,props:{code:"from typing import NamedTuple\n\n\nclass Employee(NamedTuple):\n    name: str\n    id: int = 3\n\n\nemployee = Employee(\"Guido\")\nassert employee.id == 3\nassert employee[0] == \"Guido\"\nassert isinstance(employee, tuple)\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" NamedTuple"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"Employee"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:bC}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ab}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    name: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"id"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aM}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"employee "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Employee("}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dJ}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:ak}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" employee.id "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aM}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:ak}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" employee["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ag}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:O}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dJ}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:ak}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aG}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(employee, "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:av}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"튜플을 정의 할 때 각 위치에 해당하는 값의 이름을 지정하여 속성처럼 사용할 수 있게 한다. 기존 튜플과 동일한 방식으로 사용할 수도 있다."}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:aq}]},{type:b,value:dK}]},{type:a,tag:p,props:{id:dL},children:[{type:a,tag:h,props:{},children:[{type:b,value:ay}]}]},{type:a,tag:o,props:{code:"from typing import TypedDict\n\n\nclass Point2D(TypedDict):\n    x: int\n    y: int\n    label: str\n\n\na: Point2D = {\"x\": 1, \"y\": 2, \"label\": \"good\"}  ## OK\nb: Point2D = {\"z\": 3, \"label\": \"bad\"}  ## Fails type check\n\nassert Point2D(x=1, y=2, label=\"first\") == dict(x=1, y=2, label=\"first\")\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:dm}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:T}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:"Point2D"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ay}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ab}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    x: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    y: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    label: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"a: Point2D "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:az}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"x\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"y\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dM}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"good\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aA}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:aQ}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"b: Point2D "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:az}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"z\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:aM}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dM}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"\"bad\""}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aA}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Fails type check"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:ak}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Point2D("}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:dN}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:dO}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:dP}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dQ}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:dt}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:Y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ao}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:K}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:dN}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:M}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:dO}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:V}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:F},children:[{type:b,value:dP}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:dQ}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"딕셔너리의 키와 아이템을 명시적으로 표현하기 위해 사용한다. 앞서 설명한 "},{type:a,tag:h,props:{},children:[{type:b,value:dk}]},{type:b,value:"와 "},{type:a,tag:h,props:{},children:[{type:b,value:dl}]},{type:b,value:"를 함께 사용하면 더 상세한 표현이 가능하다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"모든 값이 필수값이라면 클래스를 정의할 때 "},{type:a,tag:h,props:{},children:[{type:b,value:"total=True"}]},{type:b,value:"파라미터를 함께 전달하면 된다.(그 반대는 "},{type:a,tag:h,props:{},children:[{type:b,value:"total=False"}]},{type:b,value:I}]},{type:a,tag:j,props:{},children:[{type:b,value:"위 예시와 같이 클래스 정의 문법이 아닌 인스턴스 호출 문법으로도 사용할 수 있다."}]},{type:a,tag:o,props:{code:"Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"Point2D "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" TypedDict("}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'Point2D'"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:", {"}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'x'"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'y'"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'label'"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:R}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"})"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"클래스의 속성값의 첫 글자에 들어갈 수 없는 문자열(@, ## 등)을 포함하는 키값에 대해 정의할때 유용하다. 또한 하위 버전에서 호환되는 방식으로 작성하려면 이 방법뿐이다."}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:aq}]},{type:b,value:dK}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~dict"}]}]},{type:a,tag:p,props:{id:ao},children:[{type:a,tag:h,props:{},children:[{type:b,value:bq}]}]},{type:a,tag:o,props:{code:"from typing import Dict\n\ndef count_words(text: str) -\u003E Dict[str, int]:\n    ...\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Dict"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"count_words"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(text: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:") -\u003E Dict["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:as}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:J}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"딕셔너리에 대한 표현. 3.9부터 "},{type:a,tag:h,props:{},children:[{type:b,value:ao}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~dict, MutableMapping[KT, VT]"}]}]},{type:a,tag:p,props:{id:aE},children:[{type:a,tag:h,props:{},children:[{type:b,value:bp}]}]},{type:a,tag:o,props:{code:"from typing import List, TypeVar, Sequence\n\nT = TypeVar(\"T\", int, float)\n\n\ndef vec2(x: T, y: T) -\u003E List[T]:\n    return [x, y]\n\n\ndef keep_positives(vector: Sequence[T]) -\u003E List[T]:\n    return [item for item in vector if item \u003E 0]\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" List, TypeVar, Sequence"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:aL}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:Z}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:bd}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:I}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"vec2"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(x: T, y: T) -\u003E List[T]:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" [x, y]"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"keep_positives"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(vector: Sequence[T]) -\u003E List[T]:"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" [item "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:du}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:dR}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:dv}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" vector "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:dw}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:dR}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:"\u003E"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ag}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"리스트에 대한 표현. 3.9부터 "},{type:a,tag:h,props:{},children:[{type:b,value:aE}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~list, MutableSequence[T]"}]}]},{type:a,tag:p,props:{id:dS},children:[{type:a,tag:h,props:{},children:[{type:b,value:"Set"}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:"FrozenSet"}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"셋에 대한 표현. 3.9부터 "},{type:a,tag:h,props:{},children:[{type:b,value:ci}]},{type:b,value:aN},{type:a,tag:h,props:{},children:[{type:b,value:"frozenset"}]},{type:b,value:"으로 바로 사용이 가능하다."}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~set, MutableSet[T]"}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~frozenset, AbstractSet[T_co]"}]}]},{type:a,tag:p,props:{id:dT},children:[{type:a,tag:h,props:{},children:[{type:b,value:dU}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:dV}]},{type:b,value:aB},{type:a,tag:h,props:{},children:[{type:b,value:dV}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~collections.defaultdict, MutableMapping[KT, VT]"}]}]},{type:a,tag:p,props:{id:dW},children:[{type:a,tag:h,props:{},children:[{type:b,value:dX}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:dY}]},{type:b,value:aB},{type:a,tag:h,props:{},children:[{type:b,value:dY}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~collections.OrderedDict, MutableMapping[KT, VT]"}]}]},{type:a,tag:p,props:{id:dZ},children:[{type:a,tag:h,props:{},children:[{type:b,value:d_}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:d$}]},{type:b,value:aB},{type:a,tag:h,props:{},children:[{type:b,value:d$}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~collections.ChainMap, MutableMapping[KT, VT]"}]}]},{type:a,tag:p,props:{id:ea},children:[{type:a,tag:h,props:{},children:[{type:b,value:eb}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:ec}]},{type:b,value:aB},{type:a,tag:h,props:{},children:[{type:b,value:ec}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~collections.Counter, Dict[T, int]"}]}]},{type:a,tag:p,props:{id:ed},children:[{type:a,tag:h,props:{},children:[{type:b,value:ee}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:ef}]},{type:b,value:aB},{type:a,tag:h,props:{},children:[{type:b,value:ef}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~deque, MutableSequence[T]"}]}]},{type:a,tag:p,props:{id:eg},children:[{type:a,tag:h,props:{},children:[{type:b,value:"IO"}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:eh}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:ei}]}]},{type:a,tag:j,props:{},children:[{type:b,value:dx},{type:a,tag:h,props:{},children:[{type:b,value:"open"}]},{type:b,value:"이 반환하는 스트림에 대한 표현. "},{type:a,tag:h,props:{},children:[{type:b,value:eh}]},{type:b,value:aR},{type:a,tag:h,props:{},children:[{type:b,value:"IO[str]"}]},{type:b,value:"와 같고, "},{type:a,tag:h,props:{},children:[{type:b,value:ei}]},{type:b,value:aR},{type:a,tag:h,props:{},children:[{type:b,value:"IO[bytes]"}]},{type:b,value:"와 같다."}]},{type:a,tag:p,props:{id:ej},children:[{type:a,tag:h,props:{},children:[{type:b,value:"Pattern"}]},{type:b,value:n},{type:a,tag:h,props:{},children:[{type:b,value:"Match"}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"기본 라이브러리인 "},{type:a,tag:h,props:{},children:[{type:b,value:"re"}]},{type:b,value:"에서 사용되는 정규식 또는 정규식 매칭 결과에 대한 표현."}]},{type:a,tag:p,props:{id:b},children:[{type:a,tag:h,props:{},children:[{type:b,value:ek}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:v}]},{type:b,value:"에 대한 별칭으로 "},{type:a,tag:h,props:{},children:[{type:b,value:"python2"}]},{type:b,value:"와 호환을 위해 사용된다. 곧 지원 종료."}]},{type:a,tag:p,props:{id:el},children:[{type:a,tag:h,props:{},children:[{type:b,value:em}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:en}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:en}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Collection[T_co]"}]}]},{type:a,tag:p,props:{id:eo},children:[{type:a,tag:h,props:{},children:[{type:b,value:ep}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eq}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eq}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Sequence[int]"}]}]},{type:a,tag:p,props:{id:er},children:[{type:a,tag:h,props:{},children:[{type:b,value:es}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:et}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:et}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Sized, Iterable[T_co], Container[T_co]"}]}]},{type:a,tag:p,props:{id:eu},children:[{type:a,tag:h,props:{},children:[{type:b,value:ev}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:ew}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:ew}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:an}]}]},{type:a,tag:p,props:{id:ex},children:[{type:a,tag:h,props:{},children:[{type:b,value:ey}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:ez}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:ez}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~MappingView, AbstractSet[tuple[KT_co, VT_co]]"}]}]},{type:a,tag:p,props:{id:eA},children:[{type:a,tag:h,props:{},children:[{type:b,value:eB}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eC}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eC}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~MappingView, AbstractSet[KT_co]"}]}]},{type:a,tag:p,props:{id:eD},children:[{type:a,tag:h,props:{},children:[{type:b,value:eE}]}]},{type:a,tag:o,props:{code:"from typing import Mapping\n\ndef get_position_in_index(word_list: Mapping[str, int], word: str) -\u003E int:\n    return word_list[word]\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Mapping"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"get_position_in_index"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"(word_list: Mapping["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"], word: "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:X}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" word_list[word]"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eF}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eF}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Collection[KT], Generic[KT, VT_co]"}]}]},{type:a,tag:p,props:{id:eG},children:[{type:a,tag:h,props:{},children:[{type:b,value:eH}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eI}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eI}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Sized"}]}]},{type:a,tag:p,props:{id:eJ},children:[{type:a,tag:h,props:{},children:[{type:b,value:eK}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eL}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eL}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Mapping[KT, VT]"}]}]},{type:a,tag:p,props:{id:eM},children:[{type:a,tag:h,props:{},children:[{type:b,value:eN}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eO}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eO}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Sequence[T]"}]}]},{type:a,tag:p,props:{id:eP},children:[{type:a,tag:h,props:{},children:[{type:b,value:eQ}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eR}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eR}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~AbstractSet[T]"}]}]},{type:a,tag:p,props:{id:eS},children:[{type:a,tag:h,props:{},children:[{type:b,value:eT}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eU}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eU}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Reversible[T_co], Collection[T_co]"}]}]},{type:a,tag:p,props:{id:eV},children:[{type:a,tag:h,props:{},children:[{type:b,value:eW}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:eX}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:eX}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~MappingView, Collection[_VT_co]"}]}]},{type:a,tag:p,props:{id:eY},children:[{type:a,tag:h,props:{},children:[{type:b,value:eZ}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:e_}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:e_}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:an}]}]},{type:a,tag:p,props:{id:e$},children:[{type:a,tag:h,props:{},children:[{type:b,value:fa}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fb}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:fb}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fc}]}]},{type:a,tag:p,props:{id:fd},children:[{type:a,tag:h,props:{},children:[{type:b,value:aX}]}]},{type:a,tag:o,props:{code:"from typing import Generator\n\ndef echo_round() -\u003E Generator[int, float, str]:\n    sent = yield 0\n    while sent \u003E= 0:\n        sent = yield round(sent)\n    return 'Done'\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Generator"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:fe}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"() -\u003E Generator["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:as}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:ff}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:aY}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ag}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:fg}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:fh}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:fi}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ag}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:fj}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:aY}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:fk}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:fl}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:L}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'Done'"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"Generator[yield로 주는 값, yield로 받는 값, return으로 반환하는 값]"}]},{type:b,value:"을 표현."}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Iterator[T_co], Generic[T_co, T_contra, V_co]"}]}]},{type:a,tag:p,props:{id:fm},children:[{type:a,tag:h,props:{},children:[{type:b,value:fn}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"collections.abc.Hashable"}]},{type:b,value:fo}]},{type:a,tag:p,props:{id:fp},children:[{type:a,tag:h,props:{},children:[{type:b,value:fq}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fr}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:fr}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fc}]}]},{type:a,tag:p,props:{id:fs},children:[{type:a,tag:h,props:{},children:[{type:b,value:ft}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"collections.abc.Sized"}]},{type:b,value:fo}]},{type:a,tag:p,props:{id:fu},children:[{type:a,tag:h,props:{},children:[{type:b,value:bD}]}]},{type:a,tag:o,props:{code:"from collections.abc import Coroutine\n\nc: Coroutine[list[str], str, int]  ## Some coroutine defined elsewhere\nx = c.send('hi')                   ## Inferred type of 'x' is list[str]\n\nasync def bar() -\u003E None:\n    y = await c                    ## Inferred type of 'y' is int\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:bc}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" Coroutine"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"c: Coroutine[list["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aI}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:v}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"]  "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Some coroutine defined elsewhere"}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"x "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" c.send("}]},{type:a,tag:c,props:{class:l},children:[{type:b,value:"'hi'"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:")                   "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Inferred type of 'x' is list[str]"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:bb}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:"bar"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"() -\u003E "}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:N}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"    y "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:fv}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" c                    "}]},{type:a,tag:c,props:{class:r},children:[{type:b,value:"## Inferred type of 'y' is int"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"collections.abc.Coroutine"}]},{type:b,value:"에 대한 표현.\n파이썬의 "},{type:a,tag:h,props:{},children:[{type:b,value:bD}]},{type:b,value:"구현이 "},{type:a,tag:h,props:{},children:[{type:b,value:aX}]},{type:b,value:"로 되어있으므로, "},{type:a,tag:h,props:{},children:[{type:b,value:aX}]},{type:b,value:"의 변수 표현에 대응한다."}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~Awaitable[V_co], Generic[T_co, T_contra, V_co]"}]}]},{type:a,tag:p,props:{id:fw},children:[{type:a,tag:h,props:{},children:[{type:b,value:fx}]}]},{type:a,tag:o,props:{code:"from typing import AsyncGenerator\n\n\nasync def echo_round() -\u003E AsyncGenerator[int, float]:\n    sent = yield 0\n    while sent \u003E= 0.0:\n        rounded = await round(sent)\n        sent = yield rounded\n",language:z,meta:B},children:[{type:a,tag:C,props:{},children:[{type:a,tag:o,props:{__ignoreMap:A},children:[{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:x}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:D}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:y}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" AsyncGenerator"}]}]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:g},children:[{type:b,value:bb}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:w},children:[{type:b,value:fe}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:"() -\u003E AsyncGenerator["}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:n}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:S}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:as}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:ff}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:aY}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:ag}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:s}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:fg}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:fh}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:fi}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:"0.0"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:H}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"        rounded "}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:fv}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:i},children:[{type:b,value:fk}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:fl}]}]},{type:a,tag:e,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:fj}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:m}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:k}]},{type:a,tag:c,props:{class:g},children:[{type:b,value:aY}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" rounded"}]}]}]}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fy}]},{type:b,value:"에 대한 표현.\n비동기 제너레이터에 대한 표현. 비동기 제너레이터는 반환 값이 없으므로 두개의 제네릭 변수만 가질 수 있다.\n3.9부터는 "},{type:a,tag:h,props:{},children:[{type:b,value:fy}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~AsyncIterator[T_co], Generic[T_co, T_contra]"}]}]},{type:a,tag:p,props:{id:fz},children:[{type:a,tag:h,props:{},children:[{type:b,value:fA}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fB}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:fB}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:an}]}]},{type:a,tag:p,props:{id:fC},children:[{type:a,tag:h,props:{},children:[{type:b,value:fD}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fE}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:fE}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"~AsyncIterable[T_co]"}]}]},{type:a,tag:p,props:{id:fF},children:[{type:a,tag:h,props:{},children:[{type:b,value:fG}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fH}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:fH}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:an}]}]},{type:a,tag:p,props:{id:fI},children:[{type:a,tag:h,props:{},children:[{type:b,value:fJ}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fK}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:fK}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:an}]}]},{type:a,tag:p,props:{id:fL},children:[{type:a,tag:h,props:{},children:[{type:b,value:fM}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:fN}]},{type:b,value:P},{type:a,tag:h,props:{},children:[{type:b,value:fN}]},{type:b,value:E}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:an}]}]},{type:a,tag:p,props:{id:fO},children:[{type:a,tag:h,props:{},children:[{type:b,value:fP}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:dC}]},{type:b,value:aj}]},{type:a,tag:p,props:{id:fQ},children:[{type:a,tag:h,props:{},children:[{type:b,value:fR}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"__bytes__"}]},{type:b,value:aj}]},{type:a,tag:p,props:{id:fS},children:[{type:a,tag:h,props:{},children:[{type:b,value:fT}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"__complex__"}]},{type:b,value:aj}]},{type:a,tag:p,props:{id:fU},children:[{type:a,tag:h,props:{},children:[{type:b,value:fV}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"__float__"}]},{type:b,value:aj}]},{type:a,tag:p,props:{id:fW},children:[{type:a,tag:h,props:{},children:[{type:b,value:fX}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"__index__"}]},{type:b,value:aj}]},{type:a,tag:p,props:{id:fY},children:[{type:a,tag:h,props:{},children:[{type:b,value:fZ}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"__int__"}]},{type:b,value:aj}]},{type:a,tag:p,props:{id:f_},children:[{type:a,tag:h,props:{},children:[{type:b,value:f$}]}]},{type:a,tag:j,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:"__round__ "}]},{type:b,value:aj}]},{type:a,tag:aC,props:{id:ga},children:[{type:b,value:gb}]},{type:a,tag:j,props:{},children:[{type:b,value:"타입힌트를 사용하는 이유는 여러가지가 있겠지만, 저는 생산성 향상을 위해 사용하고 있습니다. 그러니 만약 타입힌트가 "},{type:a,tag:ad,props:{},children:[{type:b,value:"생산성 향상에 오히려 악영향을 준다면 사용할 이유가 없습니다."}]}]},{type:a,tag:j,props:{},children:[{type:b,value:"설명하지 않은 "},{type:a,tag:h,props:{},children:[{type:b,value:"cast"}]},{type:b,value:"를 사용하거나 "},{type:a,tag:h,props:{},children:[{type:b,value:"## type: ignore"}]},{type:b,value:"또는 "},{type:a,tag:h,props:{},children:[{type:b,value:"## noqa"}]},{type:b,value:"를 사용해서 오히려 타입 힌트를 왜곡해야 할 수도 있습니다. 어쩌면 도저히 위 방식의 타입힌트로 설명하기 힘들어서 스텁파일("},{type:a,tag:h,props:{},children:[{type:b,value:"*.pyi"}]},{type:b,value:")을 생성할 수도 있습니다."}]},{type:a,tag:j,props:{},children:[{type:b,value:"타입힌트가 주는 이점이 명확하지만, 그만큼 시간을 투자해야 할 수도 있으니, 이러한 점을 잘 인지하고 사용할 필요가 있습니다."}]},{type:a,tag:"style",children:[{type:b,value:".ct-3bb124{color:#82071E}\n.ct-a584f9{color:#953800}\n.ct-aa8f4f{color:#6E7781}\n.ct-9229f5{color:#0A3069}\n.ct-fc7c9f{color:#0550AE}\n.ct-d96efb{color:#8250DF}\n.ct-c2452d{color:#24292F}\n.ct-ef26b0{color:#CF222E}\n.dark .ct-ef26b0{color:#FF7B72}\n.dark .ct-c2452d{color:#C9D1D9}\n.dark .ct-d96efb{color:#D2A8FF}\n.dark .ct-fc7c9f{color:#79C0FF}\n.dark .ct-9229f5{color:#A5D6FF}\n.dark .ct-aa8f4f{color:#8B949E}\n.dark .ct-a584f9{color:#FFA657}\n.dark .ct-3bb124{color:#FFA198}"}]}],toc:{title:A,searchDepth:gc,depth:gc,links:[{id:bF,depth:aZ,text:bG},{id:bQ,depth:aZ,text:bR},{id:bT,depth:aZ,text:bU,children:[{id:bV,depth:q,text:bW},{id:bZ,depth:q,text:aH},{id:cb,depth:q,text:aJ},{id:cd,depth:q,text:aq},{id:cn,depth:q,text:ap},{id:cx,depth:q,text:cy},{id:cA,depth:q,text:cB},{id:cD,depth:q,text:bk},{id:cG,depth:q,text:al},{id:Q,depth:q,text:bm},{id:cJ,depth:q,text:bn},{id:av,depth:q,text:aw},{id:cR,depth:q,text:aF},{id:cS,depth:q,text:bt},{id:cT,depth:q,text:aK},{id:bu,depth:q,text:cW},{id:cX,depth:q,text:at},{id:da,depth:q,text:db},{id:dd,depth:q,text:de},{id:dj,depth:q,text:"Required, NotRequired"},{id:do0,depth:q,text:dp},{id:dq,depth:q,text:aU},{id:dy,depth:q,text:dz},{id:dD,depth:q,text:bx},{id:dE,depth:q,text:dF},{id:dH,depth:q,text:af},{id:dI,depth:q,text:bC},{id:dL,depth:q,text:ay},{id:ao,depth:q,text:bq},{id:aE,depth:q,text:bp},{id:dS,depth:q,text:"Set, FrozenSet"},{id:dT,depth:q,text:dU},{id:dW,depth:q,text:dX},{id:dZ,depth:q,text:d_},{id:ea,depth:q,text:eb},{id:ed,depth:q,text:ee},{id:eg,depth:q,text:"IO, TextIO, BinaryIO"},{id:ej,depth:q,text:"Pattern, Match"},{id:b,depth:q,text:ek},{id:el,depth:q,text:em},{id:eo,depth:q,text:ep},{id:er,depth:q,text:es},{id:eu,depth:q,text:ev},{id:ex,depth:q,text:ey},{id:eA,depth:q,text:eB},{id:eD,depth:q,text:eE},{id:eG,depth:q,text:eH},{id:eJ,depth:q,text:eK},{id:eM,depth:q,text:eN},{id:eP,depth:q,text:eQ},{id:eS,depth:q,text:eT},{id:eV,depth:q,text:eW},{id:eY,depth:q,text:eZ},{id:e$,depth:q,text:fa},{id:fd,depth:q,text:aX},{id:fm,depth:q,text:fn},{id:fp,depth:q,text:fq},{id:fs,depth:q,text:ft},{id:fu,depth:q,text:bD},{id:fw,depth:q,text:fx},{id:fz,depth:q,text:fA},{id:fC,depth:q,text:fD},{id:fF,depth:q,text:fG},{id:fI,depth:q,text:fJ},{id:fL,depth:q,text:fM},{id:fO,depth:q,text:fP},{id:fQ,depth:q,text:fR},{id:fS,depth:q,text:fT},{id:fU,depth:q,text:fV},{id:fW,depth:q,text:fX},{id:fY,depth:q,text:fZ},{id:f_,depth:q,text:f$}]},{id:ga,depth:aZ,text:gb}]}},_type:"markdown",_id:"content:python:type_hint_1.md",_source:"content",_file:"python\u002Ftype_hint_1.md",_extension:"md"},surround:[{_path:"\u002Fpython\u002Ftype_hint_2",title:"[코드를 깔끔하게] black - 2",description:bE},{_path:"\u002Fother\u002Fvim",title:"[Vim] Normal모드에서 영문 키보드로 자동 전환하기 (Windows)",description:"esc를 누르면 자동으로 영문 키보드가 된다."}]}},prerenderedAt:1682190480213}}("element","text","span","ct-c2452d","div","line","ct-ef26b0","code-inline","ct-fc7c9f","p"," ","ct-9229f5","=",", ","code","h3",3,"ct-aa8f4f","    ","int","def","str","ct-d96efb","from","import","python","",null,"pre"," typing ","로 바로 사용이 가능하다.","ct-a584f9","        ",":",")","...","(","return","1","None","] ","에 대한 표현.\n3.9부터는 ","self",": ","float","class","*","2",")  ",") -\u003E ","=="," TypeVar(","  ","add_2","]","):","+","strong","Exception","Protocol","0"," typing_extensions "," ("," 메소드가 구현된 객체","assert","NoReturn","## correct","~Generic[T_co]","dict","ParamSpec","Generic","print","]:","Literal","|","tuple","Tuple","## incorrect","TypedDict"," {","}  ","에 대한 표현.\n3.9부터 ","h2","typing_extensions","list","Union","isinstance","Callable","], ","TypeVar","Concatenate","T ","3"," 또는 ","**","a ","## OK","는 ","User"," {}  ","TypeGuard","move_first_element_to_last(","tup","Generator","yield",2,false," value ","))","async"," collections.abc ","\"T\"","bound","\"","\"test\""," a  ","## ok","## type checker error","Never","case","Self","TypeAlias","\"a\"","List","Dict"," Union[","Union[","Optional","type","MAX_SIZE"," TypeVarTuple(","Unpack","concat(","\"foo\"","\"bar\"","b","NamedTuple","Coroutine","생산성 향상을 위해","1-왜-타입힌트를-사용해야-하는가","1. 왜 타입힌트를 사용해야 하는가.","(value):","\"\"\"Add 2 to value.","    Args:","        value: addable value","    Returns:","        Value with 2 added","    \"\"\"","(value: ","가 ","2-버전별-타입힌트의-차이","2. 버전별 타입힌트의 차이","typing","3-타입힌트-사용법","3. 타입힌트 사용법","newtype","NewType","524313","get_user_name","callable","]) -\u003E ","]] ","__call__","typevar"," TypeVar","generic"," TypeVar, Generic","__init__",".value "," value","set",".log(","repr",".value))","%s","paramspec"," ParamSpec(","ValueT ","\"ValueT\"","inner","args, ","kwargs)"," inner",", y: ",", z: ","any","Any","foo","literalstring","LiteralString","    run_query(","never","():","            ","noreturn","Foo","return_self","typealias"," Tuple"," Tuple[ValueT] "," Tuple[ErrorT]",",)","),)"," 외에도 ","나 ","union","optional","concatenate","sum_threadsafe","])","Type","literal","True","MODE","\"r\"","open_helper(","classvar","ClassVar","10","final","Final",": Final[","## Error reported by type checker","Connection","TIMEOUT","required-notrequired","Required","NotRequired"," TypedDict","\"b\"","annotated","Annotated","typeguard","(val: list[","object",") ","for","in","if","빌트인 함수인 ","typevartuple","TypeVarTuple","Ts ","'spam'","__abs__","unpack","anystr","AnyStr","bytes","protocol","namedtuple","\"Guido\"","을 사용할 수도 있지만, 3.11부터 가능하다.","typeddict","\"label\"","x","y","label","\"first\""," item ","set-frozenset","defaultdict","DefaultDict","collections.defaultdict","ordereddict","OrderedDict","collections.OrderedDict","chainmap","ChainMap","collections.ChainMap","counter","Counter","collections.Counter","deque","Deque","collections.deque","io-textio-binaryio","TextIO","BinaryIO","pattern-match","Text","abstractset","AbstractSet","collections.abc.Set","bytestring","ByteString","collections.abc.ByteString","collection","Collection","collections.abc.Collection","container","Container","collections.abc.Container","itemview","ItemView","collections.abc.ItemsView","keysview","KeysView","collections.abc.KeysView","mapping","Mapping","collections.abc.Mapping","mappingview","MappingView","collections.abc.MappingView","mutablemapping","MutableMapping","collections.abc.MutableMapping","mutablesequence","MutableSequence","collections.abc.MutableSequence","mutableset","MutableSet","collections.abc.MutableSet","sequence","Sequence","collections.abc.Sequence","valuesview","ValuesView","collections.abc.ValuesView","iterable","Iterable","collections.abc.Iterable","iterator","Iterator","collections.abc.Iterator","~Iterable[T_co]","generator","echo_round","    sent ","while"," sent ","\u003E=","        sent ","round","(sent)","hashable","Hashable","에 대한 표현.","reversible","Reversible","collections.abc.Reversible","sized","Sized","coroutine","await","asyncgenerator","AsyncGenerator","collections.abc.AsyncGenerator","asynciterable","AsyncIterable","collections.abc.AsyncIterable","asynciterator","AsyncIterator","collections.abc.AsyncIterator","awaitable","Awaitable","collections.abc.Awaitable","contextmanager","ContextManager","contextlib.AbstractContextManager","asynccontextmanager","AsyncContextManager","contextlib.AsyncContextManager","supportsabs","SupportsAbs","supportsbytes","SupportsBytes","supportscomplex","SupportsComplex","supportsfloat","SupportsFloat","supportsindex","SupportsIndex","supportsint","SupportsInt","supportsround","SupportsRound","4-꼭-전부-사용할-필요는-없다","4. 꼭 전부 사용할 필요는 없다",5))